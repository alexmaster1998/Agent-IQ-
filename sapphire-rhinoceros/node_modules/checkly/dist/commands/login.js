"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Login_instances, _Login_promptForLoginOrSignUp;
Object.defineProperty(exports, "__esModule", { value: true });
const open = require("open");
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const baseCommand_1 = require("./baseCommand");
const inquirer = require("inquirer");
const config_1 = require("../services/config");
const api = require("../rest/api");
const auth_1 = require("../auth");
const selectAccount = async (accounts) => {
    if (accounts.length === 1) {
        return accounts[0];
    }
    const { accountName } = await inquirer.prompt([
        {
            name: 'accountName',
            type: 'list',
            choices: accounts,
            message: 'Which account do you want to use?',
        },
    ]);
    return accounts.find(({ name }) => name === accountName);
};
class Login extends baseCommand_1.BaseCommand {
    constructor() {
        super(...arguments);
        _Login_instances.add(this);
        this._checkExistingCredentials = async () => {
            if (config_1.default.hasEnvVarsConfigured()) {
                this.warn('`CHECKLY_API_KEY` ' +
                    'or `CHECKLY_ACCOUNT_ID` environment variables are configured. You must delete them to use `npx checkly login`.');
                this.exit(0);
            }
            const hasValidCredentials = config_1.default.hasValidCredentials();
            if (hasValidCredentials) {
                const { setNewkey } = await inquirer.prompt([
                    {
                        name: 'setNewkey',
                        type: 'confirm',
                        message: `You are currently logged in to "${config_1.default.data.get('accountName')}". Do you want to log out and log in to a different account?`,
                    },
                ]);
                !setNewkey && this.exit(0);
            }
        };
        this._isLoginSuccess = async () => {
            await api.validateAuthentication();
            this.log('Welcome to the Checkly CLI');
        };
    }
    async run() {
        const { flags } = await this.parse(Login);
        const { 'api-key': apiKey, 'account-id': accountId } = flags;
        await this._checkExistingCredentials();
        if (apiKey) {
            if (!accountId) {
                throw new Error('The flag --account-id (-i) is required when using --api-key (-k)');
            }
            config_1.default.auth.set('apiKey', apiKey);
            config_1.default.data.set('accountId', accountId);
            await this._isLoginSuccess();
            this.exit(0);
        }
        const mode = await __classPrivateFieldGet(this, _Login_instances, "m", _Login_promptForLoginOrSignUp).call(this);
        const authContext = new auth_1.AuthContext(mode);
        const { openUrl } = await inquirer.prompt([
            {
                name: 'openUrl',
                type: 'confirm',
                message: `Do you want to open a browser window to continue with ${mode === 'login' ? 'login' : 'sign up'}?`,
            },
        ]);
        if (!openUrl) {
            this.log(`Please open the following URL in your browser: \n\n${chalk.cyan(authContext.authenticationUrl)}`);
        }
        else {
            await open(authContext.authenticationUrl);
        }
        const { key, name } = await authContext.getAuth0Credentials();
        config_1.default.auth.set('apiKey', key);
        const { data } = await api.accounts.getAll();
        const selectedAccount = await selectAccount(data);
        config_1.default.data.set('accountId', selectedAccount.id);
        config_1.default.data.set('accountName', selectedAccount.name);
        this.log(`Successfully logged in as ${chalk.cyan.bold(name)}`);
        await this._isLoginSuccess();
        process.exit(0);
    }
}
exports.default = Login;
_Login_instances = new WeakSet(), _Login_promptForLoginOrSignUp = async function _Login_promptForLoginOrSignUp() {
    const { mode } = await inquirer.prompt([
        {
            name: 'mode',
            type: 'list',
            message: 'Do you want to log in or sign up to Checkly?',
            choices: [{
                    name: 'I want to log in with an existing Checkly account',
                    value: 'login',
                }, {
                    name: 'I want to sign up for a new Checkly account',
                    value: 'signup',
                }],
        },
    ]);
    return mode;
};
Login.hidden = false;
Login.description = 'Login to your Checkly account or create a new one.';
Login.flags = {
    'api-key': core_1.Flags.string({
        char: 'k',
        name: 'apiKey',
        description: 'Checkly User API Key. \nIf you did not have one, create it at: https://app.checklyhq.com/settings/user/api-keys.',
    }),
    'account-id': core_1.Flags.string({
        char: 'i',
        name: 'accountId',
        description: 'Checkly account ID. (This flag is required if you are using -k (--api-key) flag.',
    }),
};
//# sourceMappingURL=login.js.map