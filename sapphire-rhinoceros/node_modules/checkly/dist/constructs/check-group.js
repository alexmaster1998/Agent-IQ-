"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckGroup = void 0;
const path = require("path");
const glob = require("glob");
const ref_1 = require("./ref");
const project_1 = require("./project");
const construct_1 = require("./construct");
const browser_check_1 = require("./browser-check");
const alert_channel_subscription_1 = require("./alert-channel-subscription");
const util_1 = require("../services/util");
const defaultApiCheckDefaults = {
    headers: [],
    queryParameters: [],
    url: '',
    basicAuth: {
        username: '',
        password: '',
    },
};
/**
 * Creates a Check Group
 *
 * @remarks
 *
 * This class make use of the Check Groups endpoints.
 */
class CheckGroup extends construct_1.Construct {
    /**
     * Constructs the CheckGroup instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props CheckGroup configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs/#checkgroup Read more in the docs}
     */
    constructor(logicalId, props) {
        var _a, _b, _c;
        super(CheckGroup.__checklyType, logicalId);
        this.name = props.name;
        this.activated = props.activated;
        this.muted = props.muted;
        this.doubleCheck = props.doubleCheck;
        this.tags = props.tags;
        this.runtimeId = props.runtimeId;
        this.locations = props.locations;
        this.privateLocations = props.privateLocations;
        this.concurrency = props.concurrency;
        this.apiCheckDefaults = { ...defaultApiCheckDefaults, ...props.apiCheckDefaults };
        this.environmentVariables = (_a = props.environmentVariables) !== null && _a !== void 0 ? _a : [];
        this.alertChannels = (_b = props.alertChannels) !== null && _b !== void 0 ? _b : [];
        this.localSetupScript = props.localSetupScript;
        this.localTearDownScript = props.localTearDownScript;
        const fileAbsolutePath = project_1.Session.checkFileAbsolutePath;
        if ((_c = props.browserChecks) === null || _c === void 0 ? void 0 : _c.testMatch) {
            this.__addChecks(fileAbsolutePath, props.browserChecks);
        }
        project_1.Session.registerConstruct(this);
        this.__addSubscriptions();
    }
    __addChecks(fileAbsolutePath, browserChecks) {
        const parent = path.dirname(fileAbsolutePath);
        const matched = glob.sync(browserChecks.testMatch, { nodir: true, cwd: parent });
        for (const match of matched) {
            const defaults = {};
            let configKey;
            for (configKey in browserChecks) {
                const newVal = browserChecks[configKey];
                defaults[configKey] = newVal;
            }
            const filepath = path.join(parent, match);
            const props = {
                group: this,
                name: match,
                ...defaults,
                code: {
                    entrypoint: filepath,
                },
            };
            const checkLogicalId = (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, filepath));
            const check = new browser_check_1.BrowserCheck(checkLogicalId, props);
        }
    }
    __addSubscriptions() {
        if (!this.alertChannels) {
            return;
        }
        for (const alertChannel of this.alertChannels) {
            const subscription = new alert_channel_subscription_1.AlertChannelSubscription(`check-group-alert-channel-subscription#${this.logicalId}#${alertChannel.logicalId}`, {
                alertChannelId: ref_1.Ref.from(alertChannel.logicalId),
                groupId: ref_1.Ref.from(this.logicalId),
                activated: true,
            });
        }
    }
    synthesize() {
        return {
            name: this.name,
            activated: this.activated,
            muted: this.muted,
            doubleCheck: this.doubleCheck,
            tags: this.tags,
            locations: this.locations,
            privateLocations: this.privateLocations,
            concurrency: this.concurrency,
            localSetupScript: this.localSetupScript,
            localTearDownScript: this.localTearDownScript,
            apiCheckDefaults: this.apiCheckDefaults,
            environmentVariables: this.environmentVariables,
        };
    }
}
exports.CheckGroup = CheckGroup;
CheckGroup.__checklyType = 'check-group';
//# sourceMappingURL=check-group.js.map