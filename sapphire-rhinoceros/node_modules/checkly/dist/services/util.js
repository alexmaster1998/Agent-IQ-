"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvs = exports.escapeValue = exports.getCiInformation = exports.getGitInformation = exports.isFileSync = exports.splitConfigFilePath = exports.pathToPosix = exports.loadTsFile = exports.loadJsFile = exports.walkDirectory = void 0;
const path = require("path");
const fs = require("fs/promises");
const fsSync = require("fs");
const gitRepoInfo = require("git-repo-info");
const dotenv_1 = require("dotenv");
// TODO: Remove this in favor of glob? It's unused.
async function walkDirectory(directory, ignoreDirectories, callback) {
    const files = await fs.readdir(directory);
    for (const file of files.sort()) {
        const filepath = path.join(directory, file);
        const stats = await fs.stat(filepath);
        if (stats.isDirectory() && !ignoreDirectories.has(file)) {
            await walkDirectory(filepath, ignoreDirectories, callback);
        }
        else {
            await callback(filepath);
        }
    }
}
exports.walkDirectory = walkDirectory;
async function loadJsFile(filepath) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        let exported = require(filepath);
        if (exported instanceof Function) {
            exported = await exported();
        }
        return exported;
    }
    catch (err) {
        throw new Error(`Error loading file ${filepath}\n${err.stack}`);
    }
}
exports.loadJsFile = loadJsFile;
async function loadTsFile(filepath) {
    try {
        const tsCompiler = await getTsCompiler();
        tsCompiler.enabled(true);
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        let { default: exported } = require(filepath);
        if (exported instanceof Function) {
            exported = await exported();
        }
        tsCompiler.enabled(false); // Re-disable the TS compiler
        return exported;
    }
    catch (err) {
        throw new Error(`Error loading file ${filepath}\n${err.stack}`);
    }
}
exports.loadTsFile = loadTsFile;
// To avoid a dependency on typescript for users with no TS checks, we need to dynamically import ts-node
let tsCompiler;
async function getTsCompiler() {
    if (tsCompiler)
        return tsCompiler;
    try {
        const tsNode = await Promise.resolve().then(() => require('ts-node'));
        tsCompiler = tsNode.register({
            compilerOptions: {
                module: 'CommonJS',
            },
        });
    }
    catch (err) {
        if (err.code === 'ERR_MODULE_NOT_FOUND' || err.code === 'MODULE_NOT_FOUND') {
            throw new Error('Please install "ts-node" and "typescript" to use TypeScript configuration files');
        }
        throw err;
    }
    return tsCompiler;
}
/**
 * @param relPath the path to be converted
 * @param separator this is for testing purposes only so we can reliably replace the separator on Linux / Darwin
 */
function pathToPosix(relPath, separator) {
    // Windows uses \ rather than / as a path separator.
    // It's important that logical ID's are consistent across platforms, though.
    // Otherwise, checks will be deleted and recreated when `npx checkly deploy` is run on different machines.
    return path.normalize(relPath).split(separator !== null && separator !== void 0 ? separator : path.sep).join(path.posix.sep).replace(/^C:/, '');
}
exports.pathToPosix = pathToPosix;
function splitConfigFilePath(configFile) {
    if (configFile) {
        const cwd = path.resolve(path.dirname(configFile));
        return {
            configDirectory: cwd,
            configFilenames: [path.basename(configFile)],
        };
    }
    return {
        configDirectory: process.cwd(),
        configFilenames: undefined,
    };
}
exports.splitConfigFilePath = splitConfigFilePath;
function isFileSync(path) {
    // This helper is useful to test paths inside constructors which cannot be async.
    let result;
    try {
        result = fsSync.existsSync(path);
    }
    catch (err) {
        throw new Error(`Error parsing the file path: ${path}`);
    }
    return result;
}
exports.isFileSync = isFileSync;
/**
 * @param repoUrl default repoURL the user can set in their project config.
 */
function getGitInformation(repoUrl) {
    var _a, _b, _c, _d, _e, _f, _g;
    const repositoryInfo = gitRepoInfo();
    if (!process.env.CHECKLY_TEST_REPO_SHA && !repositoryInfo.sha) {
        return null;
    }
    // safe way to remove the email address
    const committer = (_b = (((_a = repositoryInfo.committer) === null || _a === void 0 ? void 0 : _a.match(/([^<]+)/)) || [])[1]) === null || _b === void 0 ? void 0 : _b.trim();
    return {
        commitId: (_c = process.env.CHECKLY_TEST_REPO_SHA) !== null && _c !== void 0 ? _c : repositoryInfo.sha,
        repoUrl: (_d = process.env.CHECKLY_TEST_REPO_URL) !== null && _d !== void 0 ? _d : repoUrl,
        branchName: (_e = process.env.CHECKLY_TEST_REPO_BRANCH) !== null && _e !== void 0 ? _e : repositoryInfo.branch,
        commitOwner: (_f = process.env.CHECKLY_TEST_REPO_COMMIT_OWNER) !== null && _f !== void 0 ? _f : committer,
        commitMessage: (_g = process.env.CHECKLY_TEST_REPO_COMMIT_MESSAGE) !== null && _g !== void 0 ? _g : repositoryInfo.commitMessage,
    };
}
exports.getGitInformation = getGitInformation;
function getCiInformation() {
    var _a;
    return {
        environment: (_a = process.env.CHECKLY_TEST_ENVIRONMENT) !== null && _a !== void 0 ? _a : null,
    };
}
exports.getCiInformation = getCiInformation;
function escapeValue(value) {
    return value
        ? value
            .replace(/\n/g, '\\n') // combine newlines (unix) into one line
            .replace(/\r/g, '\\r') // combine newlines (windows) into one line
        : '';
}
exports.escapeValue = escapeValue;
async function getEnvs(envFile, envArgs) {
    if (envFile) {
        const envsString = await fs.readFile(envFile, { encoding: 'utf8' });
        return (0, dotenv_1.parse)(envsString);
    }
    const envsString = `${envArgs.join('\n')}`;
    return (0, dotenv_1.parse)(envsString);
}
exports.getEnvs = getEnvs;
//# sourceMappingURL=util.js.map