import { CheckConfigDefaults } from '../services/checkly-config-loader';
import { Construct } from './construct';
import type { Runtime } from '../rest/runtimes';
import { Check } from './check';
import { CheckGroup } from './check-group';
import { AlertChannel } from './alert-channel';
import { AlertChannelSubscription } from './alert-channel-subscription';
import { ResourceSync } from '../rest/projects';
export interface ProjectProps {
    /**
     * Friendly name for your project.
     */
    name: string;
    /**
     * Git repository URL.
     */
    repoUrl?: string;
}
export interface ProjectData {
    check: Record<string, Check>;
    'check-group': Record<string, CheckGroup>;
    'alert-channel': Record<string, AlertChannel>;
    'alert-channel-subscription': Record<string, AlertChannelSubscription>;
}
export declare class Project extends Construct {
    name: string;
    repoUrl?: string;
    logicalId: string;
    data: ProjectData;
    static readonly __checklyType = "project";
    /**
     * Constructs the Project instance
     *
     * @param logicalId unique project identifier
     * @param props project configuration properties
     */
    constructor(logicalId: string, props: ProjectProps);
    addResource(type: string, logicalId: string, resource: Construct): void;
    synthesize(addTestOnly?: boolean): {
        project: Pick<Project, 'logicalId' | 'name' | 'repoUrl'>;
        resources: Array<ResourceSync>;
    };
    private synthesizeRecord;
}
export declare class Session {
    static project?: Project;
    static basePath?: string;
    static checkDefaults?: CheckConfigDefaults;
    static browserCheckDefaults?: CheckConfigDefaults;
    static checkFilePath?: string;
    static checkFileAbsolutePath?: string;
    static availableRuntimes: Record<string, Runtime>;
    static loadingChecklyConfigFile: boolean;
    static checklyConfigFileConstructs?: Construct[];
    static registerConstruct(construct: Construct): void;
    static validateCreateConstruct(construct: Construct): void;
}
